# run Nginx as a process owner (www-data)
user www-data;

worker_processes auto;

events {}
http {
  # load balancing (must be under http{} context)
  upstream php_servers {
    # enable sticky session by creating hash table for IPs and proxy requests
    #ip_hash;

    # enable load balancing based on # of connections
    # least_conn;

    server localhost:10001;
    server localhost:10002;
  }

  include ../mime.types;

  # enable GZIP for performance
  gzip on;
  gzip_comp_level 3;
  gzip_types text/css;
  gzip_types text/javascript;


  # virtual host config for HTTP
  server {
    listen 8888;

    # redirect HTTP to HTTPS
    return 301 https://$host/$request_uri;
  }

  # virtual host config for HTTPs
  server {
    # by default Nginx listens to port 80
    listen 443 ssl;

    # enable HTTPS
    ssl_certificate /etc/nginx/demo/ssl/self.crt;
    ssl_certificate_key /etc/nginx/demo/ssl/self.key;

    # enable basic auth with password
    auth_basic "Password protected";
    auth_basic_user_file /etc/nginx/demo/.htpasswd;


    # disable XSS (cross site script sharing)
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode-block";

    # set domain/IP
    server_name nginx_demo.com;

    # set the root path from which a static request is being served
    root /var/www/demo;


    # exact match for resource
    location = /exact {
        return 200 "hello from $uri \n";
    }

    # regex match
    location ~ /regex[mM]atch {
        return 200 "hello from $uri \n";
    }

    # case-insensitive
    location ~* /caseInsensitive[1-3] {
        return 200 "hello from $uri \n";
    }

    # prefix match
    location / {
        try_files $uri $uri/ index.html /404;
        #return 200 "hello from nginx_demo.com \n";
    }

    location /404 {
        return 404 "Friendly 404 response \n";
    }

    location ~* \.(css|js|jpg|png)$ {
        # return header attributes
        add_header Cache-Control public;
        add_header Pragma public;
        add_header Vary Accept-Encoding;
        add_header metadata "this is metadata";
        expires 30d;

        # disable access log for .css/js/jpg/png extentions
        access_log off;

        try_files $uri $uri/ =400;
    }

    # redirect a request to /redirect to /exact
    location /redirect {
        return 307 /exact;
    }

    # rewrite a request to /rewritten
    rewrite ^/rewrite /rewritten;
    location /rewritten {
        return 200 "hello from $uri \n";
    }

    # reverse proxy
    location /proxy {
        # reverse proxy: should end with trailing /
        # specify upstream name to enable load balancing
        proxy_pass http://php_servers;

        # set header for proxy request because add_header won't propagate to proxy header
        proxy_set_header Host $host;
    }
  }
}